# -*- coding: utf-8 -*-
"""CI_CD_Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EQ8aITNbLF6quM5ZMEwGlobylbO09jfx
"""

# --- Imports ---
import pandas as pd
import numpy as np
import plotly.express as px
from ipywidgets import interact
from IPython.display import display, Markdown

# --- Simulate a dataset (replace with your real df_simulated if needed) ---
np.random.seed(42)
authors = ['alice', 'bob', 'charlie', 'diana', 'eve', 'frank']
strategies = ['blue-green','canary','rolling']

df_simulated = pd.DataFrame({
    'author': np.random.choice(authors, 200),
    'deploy_strategy': np.random.choice(strategies, 200),
    'files_changed': np.random.randint(1,20,200),
    'lines_changed': np.random.randint(10,200,200),
    'num_tests': np.random.randint(5,50,200),
    'test_coverage': np.random.uniform(50,100,200),
    'code_complexity': np.random.uniform(1,10,200),
    'build_time_minutes': np.random.uniform(5,60,200),
    'cpu_usage': np.random.uniform(10,90,200),
    'memory_usage_gb': np.random.uniform(1,16,200),
    'build_success': np.random.choice([0,1], 200),
    'predicted_success_prob': np.random.uniform(0,1,200),
    'complexity_coverage_ratio': np.random.uniform(0.1,2,200),
    'files_per_test': np.random.uniform(0.1,2,200),
    'lines_per_file': np.random.uniform(5,50,200),
    'resource_efficiency': np.random.uniform(0.1,5,200),
    'memory_per_file': np.random.uniform(0.1,5,200),
    'hour': np.random.randint(0,24,200),
    'day_of_week': np.random.randint(0,7,200),
    'is_business_hours': np.random.choice([0,1],200)
})

# --- Function to render the interactive dashboard ---
def interactive_dashboard(author='All', strategy='All'):
    # Filter dataset
    df_filtered = df_simulated.copy()
    if author != 'All':
        df_filtered = df_filtered[df_filtered['author']==author]
    if strategy != 'All':
        df_filtered = df_filtered[df_filtered['deploy_strategy']==strategy]

    # --- Dashboard Title ---
    display(Markdown(f"## CI/CD Build Dashboard\n**Author:** {author} | **Strategy:** {strategy}"))

    # --- Scatter Plot: Build Time vs Predicted Success ---
    display(Markdown("### Scatter Plot: Build Time vs Predicted Success Probability"))
    fig_scatter = px.scatter(
        df_filtered,
        x='predicted_success_prob',
        y='build_time_minutes',
        color='build_success',
        hover_data=['author','deploy_strategy','files_changed','lines_changed','num_tests','cpu_usage','memory_usage_gb'],
        labels={'predicted_success_prob':'Predicted Success Probability','build_time_minutes':'Build Time (min)','build_success':'Build Success'},
        title='Build Time vs Predicted Success Probability'
    )
    fig_scatter.show()

    # --- Bar Plot: Success Rate by Deployment Strategy ---
    display(Markdown("### Bar Plot: Average Success Rate by Deployment Strategy"))
    df_strategy = df_filtered.groupby('deploy_strategy')['build_success'].mean().reset_index()
    fig_bar = px.bar(
        df_strategy,
        x='deploy_strategy',
        y='build_success',
        labels={'deploy_strategy':'Deployment Strategy','build_success':'Average Success Rate'},
        title='Average Build Success by Deployment Strategy'
    )
    fig_bar.show()

    # --- Histogram: Files Changed ---
    display(Markdown("### Histogram: Distribution of Files Changed per Build"))
    fig_hist = px.histogram(
        df_filtered,
        x='files_changed',
        nbins=20,
        labels={'files_changed':'Files Changed'},
        title='Distribution of Files Changed'
    )
    fig_hist.show()

    # --- Scatter: CPU vs Memory Usage ---
    display(Markdown("### Scatter Plot: CPU vs Memory Usage"))
    fig_cpu_mem = px.scatter(
        df_filtered,
        x='cpu_usage',
        y='memory_usage_gb',
        color='build_success',
        hover_data=['author','deploy_strategy','build_time_minutes'],
        labels={'cpu_usage':'CPU Usage (%)','memory_usage_gb':'Memory Usage (GB)','build_success':'Build Success'},
        title='CPU vs Memory Usage'
    )
    fig_cpu_mem.show()

    # --- Scatter: Code Complexity vs Test Coverage ---
    display(Markdown("### Scatter Plot: Code Complexity vs Test Coverage"))
    fig_complexity = px.scatter(
        df_filtered,
        x='code_complexity',
        y='test_coverage',
        color='build_success',
        hover_data=['author','deploy_strategy'],
        labels={'code_complexity':'Code Complexity','test_coverage':'Test Coverage (%)','build_success':'Build Success'},
        title='Code Complexity vs Test Coverage'
    )
    fig_complexity.show()

    # --- Histogram: Resource Efficiency ---
    display(Markdown("### Histogram: Resource Efficiency"))
    fig_efficiency = px.histogram(
        df_filtered,
        x='resource_efficiency',
        nbins=20,
        labels={'resource_efficiency':'Resource Efficiency'},
        title='Distribution of Resource Efficiency per Build'
    )
    fig_efficiency.show()

# --- Interactive Dropdown Filters ---
interact(interactive_dashboard,
         author=['All'] + list(df_simulated['author'].unique()),
         strategy=['All'] + list(df_simulated['deploy_strategy'].unique()))

